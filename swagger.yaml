openapi: 3.0.3
info:
  title: Ecommerce API
  version: 1.0.0
servers:
  - url: /api
paths:
  /auth/register:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        "201":
          description: Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": { description: Bad request }
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Tokens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "401": { description: Invalid credentials }
  /auth/refresh:
    post:
      summary: Refresh access token
      security:
        - bearerAuth: []
      responses:
        "200":
          description: New access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"

  /users/me:
    get:
      summary: Get current user
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: Me
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
    put:
      summary: Update current user
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserUpdate" }
      responses:
        "200": { description: Updated }
    delete:
      summary: Delete account
      security: [ { bearerAuth: [] } ]
      responses:
        "204": { description: Deleted }

  /products:
    get:
      summary: List products
      parameters:
        - in: query; name: q; schema: { type: string }
        - in: query; name: brand; schema: { type: string }
        - in: query; name: code; schema: { type: string, description: "sku|serial_number|upc|ean" }
        - in: query; name: page; schema: { type: integer, default: 1 }
        - in: query; name: per_page; schema: { type: integer, default: 20, maximum: 100 }
      responses:
        "200":
          description: Product list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
    post:
      summary: Create product (admin)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ProductCreate" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Product" }

  /products/{id}:
    get:
      summary: Get product by id
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Product" } } } }
        "404": { description: Not found }
    put:
      summary: Update product (admin)
      security: [ { bearerAuth: [] } ]
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ProductUpdate" }
      responses:
        "200": { description: Updated }
    delete:
      summary: Delete product (admin)
      security: [ { bearerAuth: [] } ]
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses:
        "200": { description: Deleted }

  /products/scan:
    post:
      summary: Lookup by code (sku/serial/upc/ean)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code: { type: string }
                serial_number: { type: string }
                upc: { type: string }
                ean: { type: string }
      responses:
        "200": { description: Product, content: { application/json: { schema: { $ref: "#/components/schemas/Product" } } } }
        "404": { description: Not found }

  /carts:
    get:
      summary: Get my cart items
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: Cart items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItems"

  /carts/items:
    post:
      summary: Add item (by product_id or code)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [product_id, quantity]
                  properties:
                    product_id: { type: integer }
                    quantity: { type: integer, minimum: 1 }
                - type: object
                  required: [code, quantity]
                  properties:
                    code: { type: string, description: "sku|serial|upc|ean" }
                    quantity: { type: integer, minimum: 1 }
      responses:
        "201": { description: Added, content: { application/json: { schema: { $ref: "#/components/schemas/CartItem" } } } }

  /carts/items/{item_id}:
    delete:
      summary: Remove cart item
      security: [ { bearerAuth: [] } ]
      parameters: [ { in: path, name: item_id, required: true, schema: { type: integer } } ]
      responses:
        "200": { description: Removed }

  /orders:
    post:
      summary: Create order from cart (checkout)
      security: [ { bearerAuth: [] } ]
      responses:
        "201": { description: Created, content: { application/json: { schema: { $ref: "#/components/schemas/Order" } } } }
    get:
      summary: List my orders
      security: [ { bearerAuth: [] } ]
      responses:
        "200": { description: Orders, content: { application/json: { schema: { $ref: "#/components/schemas/Orders" } } } }

  /orders/{id}:
    get:
      summary: Get order by id
      security: [ { bearerAuth: [] } ]
      parameters: [ { in: path, name: id, required: true, schema: { type: integer } } ]
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Order" } } } }
        "404": { description: Not found }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Register:
      type: object
      required: [email, username, password]
      properties:
        email: { type: string, format: email }
        username: { type: string }
        password: { type: string, format: password }
        address: { type: string }
    Login:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    AccessToken:
      type: object
      properties:
        access_token: { type: string }
    Tokens:
      type: object
      properties:
        access_token: { type: string }
        refresh_token: { type: string }

    User:
      type: object
      properties:
        id: { type: integer }
        email: { type: string }
        username: { type: string }
        address: { type: string }
        role: { type: string }

    Product:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string }
        brand: { type: string }
        sku: { type: string }
        serial_number: { type: string }
        upc: { type: string }
        ean: { type: string }
        image_url: { type: string }
        attributes: { type: object, additionalProperties: true }
        price_cents: { type: integer }
        currency: { type: string }
        stock: { type: integer }

    ProductCreate:
      allOf:
        - $ref: "#/components/schemas/Product"
      required: [name, price_cents, currency, stock]

    ProductUpdate:
      $ref: "#/components/schemas/Product"

    ProductListResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: array
          items: { $ref: "#/components/schemas/Product" }
        meta:
          type: object
          properties:
            page: { type: integer }
            per_page: { type: integer }
            total: { type: integer }

    CartItem:
      type: object
      properties:
        id: { type: integer }
        cart_id: { type: integer }
        product_id: { type: integer }
        quantity: { type: integer }
        unit_price_cents: { type: integer }

    CartItems:
      type: array
      items:
        $ref: "#/components/schemas/CartItem"

    OrderItem:
      type: object
      properties:
        id: { type: integer }
        order_id: { type: integer }
        product_id: { type: integer }
        quantity: { type: integer }
        unit_price_cents: { type: integer }

    Order:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        status: { type: string }
        total_cents: { type: integer }
        items:
          type: array
          items: { $ref: "#/components/schemas/OrderItem" }

    Orders:
      type: array
      items: { $ref: "#/components/schemas/Order" }
